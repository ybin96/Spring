애플리케이션을 개발하려면 데이터를 조회하는 기능은 필수입니다.
쿼리 메소드는 스프링 데이터 JAP에서 제공하는 핵심 기능중 하나로
Repository 인터페이스에 간단히 "네이밍 룰"을 이용하여 
메소드를 작성하면 원하는 쿼리를 실행할 수 있다.


book
bookid		pk
bookname
price
publisher

<< 네이밍 룰 >>

find + (엔티티이름) + By + 변수이름



<< 이것 말고도 다양한 sql이 필요해요 >>
select * from book where bookname = '재미있는 자바';
	findByBookname(String bookname)

select * from book where publisher = '한빛미디어';
	findByPublisher(String publisher)

select * from book where price = 30000;
	findByPrice(int price)

select * from book where price >= 30000;
	findByPriceGreaterThanEqual(int price)

select * from book where publisher = '한빛미디어' and price = 30000;
	findByPublisherAndPrice(String publisher, int price);

select * from book where publisher = '한빛미디어' and price >= 30000;
	findByPublisherAndPriceGreaterThanEqual(String publisher, int price)

<< 기본적으로 제공하는 메소드 >>
findAll		select * from book
save		insert into ~~~, update ~~~
delete		delete ~~~ where bookid=?
count		select count(*) from book;

-----------------------------------------------------------------------------------------

create view View_ListOrders
as select orderid, name, bookname, orderdate, saleprice,price
from customer c, orders o, book b
where c.custid = o.custid and
o.bookid = b.bookid order by orderdate desc;




create view View_ListOrders2
as select name, bookname, orderdate, saleprice,price
from customer c, orders o, book b
where c.custid = o.custid and
o.bookid = b.bookid order by orderdate desc;



var data = "alert('ok')";
eval(data);

==> 이런것이 자바에도 있는지 찾아 봅시다
		없어요!
		

--------------------------------------------------------------------------------------

public class Test {

	public static void main(String[] args) {

		String TestClass = "ADSA"; // 원래는 패키지 경로까지 적어야 하나 같은 default 경로라 생략
		
		try {
                        // 이것만 선언할 경우 static만 호출 => 여기서 System.out.println("난 static블럭에 있는 함수"); 호출
			Class testClass = Class.forName(TestClass); 

			Object newObj = testClass.newInstance(); // 클래스의 받아온 정보를 기반으로 객체를 생성 

			Method m = testClass.getMethod("show", boolean.class, Integer.class); // 메소드 불러오기 

			m.invoke(newObj, true, 3); // 메소드 호출 A 3 출력
			
			// testClass.getMethod("A").invoke(newObj);  A가 생성되었습니다. public일 때

                        m = testClass.getDeclaredMethod("A"); 
			m.setAccessible(true); // private를 접근하기 위해서는 getDeclaredMethod 뒤에 해줘야 한다.
			m.invoke(newObj);   //  A가 생성되었습니다.

		} catch (Exception e) {
		}

	}
}


class ADSA {
	private void A() {
		System.out.println("A가 생성되었습니다.");
	}

	public void show(boolean showOK, Integer a) {
		if (showOK)
			System.out.println("A " + a + " 출력");
	}

	static {
		System.out.println("난 static블럭에 있는 함수");
	}
}

문자열을 메소드로 만들어 주는게 있나 찾아봅시다.

public class Test {

	public static void main(String[] args) {

		String TestClass = "ADSA"; // 원래는 패키지 경로까지 적어야 하나 같은 default 경로라 생략
		
		try {
                        // 이것만 선언할 경우 static만 호출 => 여기서 System.out.println("난 static블럭에 있는 함수"); 호출
			Class testClass = Class.forName(TestClass); 

			Object newObj = testClass.newInstance(); // 클래스의 받아온 정보를 기반으로 객체를 생성 

			Method m = testClass.getMethod("show", boolean.class, Integer.class); // 메소드 불러오기 

			m.invoke(newObj, true, 3); // 메소드 호출 A 3 출력
			
			// testClass.getMethod("A").invoke(newObj);  A가 생성되었습니다. public일 때

                        m = testClass.getDeclaredMethod("A"); 
			m.setAccessible(true); // private를 접근하기 위해서는 getDeclaredMethod 뒤에 해줘야 한다.
			m.invoke(newObj);   //  A가 생성되었습니다.

		} catch (Exception e) {
		}

	}
}


class ADSA {
	private void A() {
		System.out.println("A가 생성되었습니다.");
	}

	public void show(boolean showOK, Integer a) {
		if (showOK)
			System.out.println("A " + a + " 출력");
	}

	static {
		System.out.println("난 static블럭에 있는 함수");
	}
}












